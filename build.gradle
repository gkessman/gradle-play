plugins {
    id 'play'
    id 'idea'
    id 'com.craigburke.client-dependencies' version '1.2.0'
    id 'org.ajoberstar.grgit' version '1.6.0-rc.1'
}

repositories {
    jcenter()
    maven {
        name "typesafe-maven-release"
        url "https://repo.typesafe.com/typesafe/maven-releases"
    }
    ivy {
        name "typesafe-ivy-release"
        url "https://repo.typesafe.com/typesafe/ivy-releases"
        layout "ivy"
    }
}

dependencies {
    play 'commons-lang:commons-lang:2.6'
    play 'org.avaje:avaje-agentloader:2.1.2'
    playTest 'com.google.guava:guava:17.0'
}

model {
    components {
        play {
            platform play: '2.3.9', scala: '2.10', java: '1.8'
        }
    }
}

import org.ajoberstar.grgit.*;

task getConfigs {
    def destination = file("conf/config")
    if (destination.exists()) {
        def configRepo = Grgit.open(dir: destination)
        configRepo.pull()
    } else {
        Grgit.clone(dir: destination, uri: 'https://github.com/gkessman/esTail.git')
    }
}

// NPM Dependencies are included here
clientDependencies {
    bower {
        'jquery'('2.0.0')
    }
    npm {
        'bootstrap'('3.3.7', exclude: 'jquery')
        'angular2'('2.0.0-beta.17')
    }
    installDir = 'public/assets/vendor'
}

// Run this first on fresh project clone to pull dependencies and application configs
task init {
    dependsOn 'getConfigs'
    dependsOn 'clientInstall'
    tasks['clientInstall'].mustRunAfter 'getConfigs'
}

idea.module {
    // Source directories
    sourceDirs += file('app')
    testSourceDirs += file('test')

    // Generated sources
    def generated = [
            file("$buildDir/playBinary/src/compilePlayBinaryRoutes"),
            file("$buildDir/playBinary/src/compilePlayBinaryTwirlTemplates")
    ]
    generated.each { src ->
        sourceDirs += src
        generatedSourceDirs += src
    }

    // Output directories
    outputDir = file("$buildDir/playBinary/classes")
    testOutputDir = file("$buildDir/playBinary/testClasses")

    // Excluded dirs
    excludeDirs -= buildDir
    excludeDirs += [
            outputDir,
            testOutputDir,
            file("$buildDir/playBinary/lib"),
            file("$buildDir/playBinary/reports"),
            file("$buildDir/playBinary/results"),
            file("$buildDir/tmp"),
            file("$buildDir/assets")
    ]

    // Dependencies
    scopes.COMPILE = [ 'plus' : [ configurations.play ] ]
    scopes.TEST = [ 'plus' : [ configurations.playTest ] ]

    iml.withXml { provider ->
        def content = provider.node.component.content.first()

        // Resources
        def confUrl = 'file://$MODULE_DIR$/conf'
        def confAttrs = content.find { it.@url == confUrl }?.attributes()
        if (confAttrs) {
            confAttrs.remove('isTestSource')
            confAttrs.type = 'java-resource'
        } else {
            content.appendNode('sourceFolder', [url: confUrl, type: 'java-resource'])
        }

        // Test resources
        def testResourcesUrl = 'file://$MODULE_DIR$/test/resources'
        def testResourcesAttrs = content.find { it.@url == testResourcesUrl }?.attributes()
        if (testResourcesAttrs) {
            testResourcesAttrs.remove('isTestSource')
            testResourcesAttrs.type = 'java-test-resource'
        } else {
            content.appendNode('sourceFolder', [url: testResourcesUrl, type: 'java-resource'])
        }
    }
}